#define MAX_THREAD 100
#define BUFFER_SIZE 5
#define TRUE 1
#define FALSE 0
typedef struct {
int buffer[BUFFER_SIZE];
int in;
int out;
int count;
} bbuf_t;
void daftar_trit (void* trit); // mempersiapkan "trit"
void jalankan_trit (void); // menjalankan dan menunggu hasil dari
// "daftar_trit"
void beberes_trit (char* pesan); // beberes menutup "jalankan_trit"
void rehat_acak (long max_mdetik); // istirohat acak "0-max_mdetik" (ms)
void init_buffer (void); // init buffer
void enter_buffer (int entry); // enter an integer item
int remove_buffer (void); // remove the item
void init_rw (void); // init readers writers
int startRead (void); // start reading
int endRead (void); // end reading
void startWrite (void); // start writing
void endWrite (void); // end writing

#include <stdio.h>
002 #include <stdlib.h>
003 #include <semaphore.h>
004 #include <time.h>
005 #include "myutils.h"
006 #define MAX_TRIT 10
007 int nomor_trit=0;
008 sem_t mutex;
009 sem_t tmutex[MAX_TRIT];
010 void init_random() {
011 srand(time(NULL));
012 }
013 void* TRIT_sederhana (void* a) {
014 //ID dari trit yang sedang berjalan.
015 int trit_ID;
016 sem_wait (&mutex);
017 trit_ID = nomor_trit++;
018 sem_post (&mutex);
019 sem_wait (&tmutex[trit_ID]);
020 printf("TRIT No %d\n", trit_ID);
021 int next = trit_ID + 1;
022 if (next >= MAX_TRIT)
023 next = next % MAX_TRIT;
024 sem_post (&tmutex[next]);
025 }
026 int main(int argc, char * argv[]){
027 int ii;
028 init_random();
029 int mulai = rand() % MAX_TRIT;
030 for (ii=0; ii < MAX_TRIT; ii++) {
031 sem_init (&tmutex[ii], 0, 0);
032 daftar_trit(TRIT_sederhana);
033 }
034 sem_init (&mutex, 0, 1);
035 sem_post (&tmutex[mulai]);
036 jalankan_trit();
037 beberes_trit("INDUK mohon diri");
038 }
039 /* DICONTEK DAN DIMODIF DARI B210 */
